# Makefile (Main Project Makefile - Orchestrates the full build)

# --- Compiler and Linker ---
CC := arm-none-eabi-gcc
LD := arm-none-eabi-gcc # Often the same as CC for linking - kept for clarity but not directly used in linking command below

# --- Linker Script ---
LINKER_SCRIPT := linker_script.ld

# --- Target Executable Name ---
TARGET := stm32_ll_nucleo.elf

# --- Linker Flags ---
# -T: Specify linker script
# -Wl,-Map=$(TARGET).map: Generate a map file for memory analysis
# -nostdlib: Do not link the standard C library (common for bare-metal)
# -specs=nosys.specs: Link with newlib-nano's minimal system call stubs.
# -lc: Link against the standard C library (libc.a from newlib-nano).
# -lgcc: Link against the GCC compiler support library (libgcc.a).
# These two are crucial when -nostdlib is used and you need functions like memcpy/memset.
LDFLAGS := -nostdlib -T $(LINKER_SCRIPT) -Wl,-Map=$(TARGET).map

# --- Source Files for each module (relative to project root) ---
# Define all source files here. The sub-Makefiles will use these for compilation.
C_SOURCES_OS := os/src/main.c os/src/startup.c os/src/System_Fsm.c
C_SOURCES_GPIO := stm32_ll_gpio/src/stm32l433_ll_gpio.c stm32_ll_gpio/src/stm32l433_ll_gpio_cfg.c
C_SOURCES_RCC := stm32_ll_rcc/src/stm32l433_ll_rcc.c stm32_ll_rcc/src/stm32l433_ll_rcc_cfg.c
C_SOURCES_SYSCFG := stm32_ll_syscfg/src/stm32_syscfg.c stm32_ll_syscfg/src/stm32_syscfg_cfg.c
C_SOURCES_FLASH := stm32_ll_flash/src/stm32_ll_flash.c stm32_ll_flash/src/stm32_ll_flash_cfg.c
C_SOURCES_EXTI := stm32_ll_exti/src/stm32_ll_exti.c
C_SOURCES_TIMER := stm32_ll_Timer/src/stm32_ll_timers.c

# --- Object Files for each module (derived from source files) ---
# These are the object files that will be generated by the sub-Makefiles.
# The 'patsubst' function replaces '.c' with '.o' in the source file paths.
OBJS_OS := $(patsubst %.c,%.o,$(C_SOURCES_OS))
OBJS_GPIO := $(patsubst %.c,%.o,$(C_SOURCES_GPIO))
OBJS_RCC := $(patsubst %.c,%.o,$(C_SOURCES_RCC))
OBJS_SYSCFG := $(patsubst %.c,%.o,$(C_SOURCES_SYSCFG))
OBJS_FLASH := $(patsubst %.c,%.o,$(C_SOURCES_FLASH))
OBJS_EXTI := $(patsubst %.c,%.o,$(C_SOURCES_EXTI))
OBJS_TIMER := $(patsubst %.c,%.o,$(C_SOURCES_TIMER))

# --- All Object Files to Link ---
# This variable combines all object files from all modules into a single list
ALL_OBJS := $(OBJS_OS) $(OBJS_GPIO) $(OBJS_RCC) $(OBJS_SYSCFG) $(OBJS_EXTI) $(OBJS_FLASH) $(OBJS_TIMER)

# --- Phony Targets ---
.PHONY: all clean submodules_build submodules_clean

# --- Main Build Rule ---
# The 'all' target is the default target. It depends on the final executable.
# It also depends on 'submodules_build' to ensure all object files are created.
all: submodules_build $(TARGET)

# --- Submodules Build Rule ---
# This rule explicitly calls 'make all' in each submodule's directory.
submodules_build:
	$(MAKE) -C os all
	$(MAKE) -C stm32_ll_gpio all
	$(MAKE) -C stm32_ll_rcc all
	$(MAKE) -C stm32_ll_syscfg all
	$(MAKE) -C stm32_ll_exti all
	$(MAKE) -C stm32_ll_flash all
	$(MAKE) -C stm32_ll_Timer all


# --- Linking Rule ---
# This rule links all the generated object files into the final ELF executable.
# It depends on all object files ($(ALL_OBJS)).
# The linker script is passed via LDFLAGS, so it's removed from prerequisites.
# IMPORTANT: Using $(CC) here to ensure proper handling of -Wl, flags.
$(TARGET): $(ALL_OBJS)
	@echo "--- Linking Phase ---"
	@echo "ALL_OBJS for linking: $(ALL_OBJS)"
	$(CC) $(LDFLAGS) $^ -o $@

# --- Clean Rule ---
# This rule removes the final executable and map file, and then calls the 'clean'
# target in each submodule's Makefile to remove their respective object files.
clean: submodules_clean
	rm -f $(TARGET) *.map

# --- Clean Submodules ---
# This rule explicitly calls the 'clean' target in each submodule's Makefile.
submodules_clean:
	$(MAKE) -C os clean
	$(MAKE) -C stm32_ll_gpio clean
	$(MAKE) -C stm32_ll_rcc clean
	$(MAKE) -C stm32_ll_syscfg clean
	$(MAKE) -C stm32_ll_exti clean
	$(MAKE) -C stm32_ll_flash clean
	$(MAKE) -C stm32_ll_Timer clean
