#ifndef STM32L433_LL_CFG_H
#define STM32L433_LL_CFG_H

#include <stdint.h>
#include <stm32l433xx.h>

// RCC_CR MSION
enum { RCC_CR_SETTING_MSION_OFF_SETTING = 0, RCC_CR_SETTING_MSION_ON_SETTING = 1 };

// RCC_CR MSIRDY
enum { RCC_CR_SETTING_MSIRDY_NOTREADY_SETTING = 0, RCC_CR_SETTING_MSIRDY_READY_SETTING = 1 };

// RCC_CR MSIPLLEN
enum { RCC_CR_SETTING_MSIPLLEN_OFF_SETTING = 0, RCC_CR_SETTING_MSIPLLEN_ON_SETTING = 1 };

// RCC_CR MSIRGSEL
enum { RCC_CR_SETTING_MSIRGSEL_CSR_SETTING = 0, RCC_CR_SETTING_MSIRGSEL_CR_SETTING = 1 };

// RCC_CR MSIRANGE (MSI clock ranges, see RM0394 Table 17)
enum {
    RCC_CR_SETTING_MSIRANGE_100_SETTING = 0x0, // 100 kHz
    RCC_CR_SETTING_MSIRANGE_200_SETTING = 0x1, // 200 kHz
    RCC_CR_SETTING_MSIRANGE_400_SETTING = 0x2, // 400 kHz
    RCC_CR_SETTING_MSIRANGE_800_SETTING = 0x3, // 800 kHz
    RCC_CR_SETTING_MSIRANGE_1M_SETTING = 0x4, // 1 MHz
    RCC_CR_SETTING_MSIRANGE_2M_SETTING = 0x5, // 2 MHz
    RCC_CR_SETTING_MSIRANGE_4M_SETTING = 0x6, // 4 MHz
    RCC_CR_SETTING_MSIRANGE_8M_SETTING = 0x7, // 8 MHz
    RCC_CR_SETTING_MSIRANGE_16M_SETTING = 0x8, // 16 MHz
    RCC_CR_SETTING_MSIRANGE_24M_SETTING = 0x9, // 24 MHz
    RCC_CR_SETTING_MSIRANGE_32M_SETTING = 0xA, // 32 MHz
    RCC_CR_SETTING_MSIRANGE_48M_SETTING = 0xB  // 48 MHz
    // 0xC-0xF: Reserved
};

// RCC_CR HSION
enum { RCC_CR_SETTING_HSION_OFF_SETTING = 0, RCC_CR_SETTING_HSION_ON_SETTING = 1 };

// RCC_CR HSIKERON
enum { RCC_CR_SETTING_HSIKERON_OFF_SETTING = 0, RCC_CR_SETTING_HSIKERON_ON_SETTING = 1 };

// RCC_CR HSIRDY
enum { RCC_CR_SETTING_HSIRDY_NOTREADY_SETTING = 0, RCC_CR_SETTING_HSIRDY_READY_SETTING = 1 };

// RCC_CR HSIASFS
enum { RCC_CR_SETTING_HSIASFS_OFF_SETTING = 0, RCC_CR_SETTING_HSIASFS_ON_SETTING = 1 };

// RCC_CR HSEON
enum { RCC_CR_SETTING_HSEOSC_OFF_SETTING = 0, RCC_CR_SETTING_HSEOSC_ON_SETTING = 1 };

// RCC_CR HSERDY
enum { RCC_CR_SETTING_HSERDY_NOTREADY_SETTING = 0, RCC_CR_SETTING_HSERDY_READY_SETTING = 1 };

// RCC_CR HSEBYP
enum { RCC_CR_SETTING_HSEBYP_OFF_SETTING = 0, RCC_CR_SETTING_HSEBYP_ON_SETTING = 1 };

// RCC_CR CSSON
enum { RCC_CR_SETTING_CSSON_OFF_SETTING = 0, RCC_CR_SETTING_CSSON_ON_SETTING = 1 };

// RCC_CR PLL_ON
enum { RCC_CR_SETTING_PLL_OFF_SETTING = 0, RCC_CR_SETTING_PLL_ON_SETTING = 1 };

// RCC_CR PLL_RDY
enum { RCC_CR_SETTING_PLL_NOTREADY_SETTING = 0, RCC_CR_SETTING_PLL_READY_SETTING = 1 };

// RCC_CR PLLSAI1ON
enum { RCC_CR_SETTING_PLLSAI1_OFF_SETTING = 0, RCC_CR_SETTING_PLLSAI1_ON_SETTING = 1 };

// RCC_CR PLLSAI1RDY
enum { RCC_CR_SETTING_PLLSAI1_NOTREADY_SETTING = 0, RCC_CR_SETTING_PLLSAI1_READY_SETTING = 1 };

// --- RCC_CR (Clock Control Register) ---
typedef struct
{
    uint32_t MSION:1;
    uint32_t MSIRDY:1;
    uint32_t MSIPLLEN:1;
    uint32_t MSIRGSEL:1;
    uint32_t MSIRANGE:4;
    uint32_t HSION:1;
    uint32_t HSIKERON:1;
    uint32_t HSIRDY:1;
    uint32_t HSIASFS:1;
    uint32_t res_1:4;
    uint32_t HSEON:1;
    uint32_t HSERDY:1;
    uint32_t HSEBYP:1;
    uint32_t CSSON:1;
    uint32_t res_2:4;
    uint32_t PLL_ON:1;
    uint32_t PLL_RDY:1;
    uint32_t PLLSAI1ON:1;
    uint32_t PLLSAI1RDY:1;
    uint32_t res_3 : 4;
} RCC_CR_B_t;

typedef union
{
    RCC_CR_B_t B;
    uint32_t U;
} RCC_CR_Reg_t;

extern volatile RCC_CR_Reg_t RCC_CR_Reg;


// --- RCC_ICSCR (Internal Clock Source Calibration Register) ---
typedef struct
{
    uint32_t MSICAL:8;
    uint32_t MSITRIM:8;
    uint32_t HSICAL:8;
    uint32_t HSITRIM:7;
    uint32_t res:1;
} RCC_ICSCR_B_t;

typedef union
{
    RCC_ICSCR_B_t B;
    uint32_t U;
} RCC_ICSCR_Reg_t;

extern volatile RCC_ICSCR_Reg_t RCC_ICSCR_Reg;

// RCC_CFGR SWS (System clock switch status)
enum {
    RCC_CFGR_SWS_MSI_SETTING    = 0x0,
    RCC_CFGR_SWS_HSI16_SETTING  = 0x1,
    RCC_CFGR_SWS_HSE_SETTING    = 0x2,
    RCC_CFGR_SWS_PLL_SETTING    = 0x3
};

// RCC_CFGR HPRE (AHB prescaler)
enum {
    RCC_CFGR_HPRE_DIV1_SETTING   = 0x7,
    RCC_CFGR_HPRE_DIV2_SETTING   = 0x8,
    RCC_CFGR_HPRE_DIV4_SETTING   = 0x9,
    RCC_CFGR_HPRE_DIV8_SETTING   = 0xA,
    RCC_CFGR_HPRE_DIV16_SETTING  = 0xB,
    RCC_CFGR_HPRE_DIV64_SETTING  = 0xC,
    RCC_CFGR_HPRE_DIV128_SETTING = 0xD,
    RCC_CFGR_HPRE_DIV256_SETTING = 0xE,
    RCC_CFGR_HPRE_DIV512_SETTING = 0xF
};

// RCC_CFGR PPRE1 (APB1 prescaler)
enum {
    RCC_CFGR_PPRE1_DIV1_SETTING  = 0x3,
    RCC_CFGR_PPRE1_DIV2_SETTING  = 0x4,
    RCC_CFGR_PPRE1_DIV4_SETTING  = 0x5,
    RCC_CFGR_PPRE1_DIV8_SETTING  = 0x6,
    RCC_CFGR_PPRE1_DIV16_SETTING = 0x7
};

// RCC_CFGR PPRE2 (APB2 prescaler)
enum {
    RCC_CFGR_PPRE2_DIV1_SETTING  = 0x3,
    RCC_CFGR_PPRE2_DIV2_SETTING  = 0x4,
    RCC_CFGR_PPRE2_DIV4_SETTING  = 0x5,
    RCC_CFGR_PPRE2_DIV8_SETTING  = 0x6,
    RCC_CFGR_PPRE2_DIV16_SETTING = 0x7
};

enum
{
    RCC_CFGR_STOPWUCK_DISABLE_SETTING = 0, // Stop WUCK clock disabled
    RCC_CFGR_STOPWUCK_ENABLE_SETTING  = 1  // Stop WUCK clock enabled
};
enum
{
    SW_MSI_SETTING    = 0x0, // MSI oscillator clock selected as system clock
    SW_HSI16_SETTING  = 0x1, // HSI16 oscillator clock selected as system clock
    SW_HSE_SETTING    = 0x2, // HSE oscillator clock selected as system clock
    SW_PLL_SETTING    = 0x3, // PLL clock selected as system clock
};

// RCC_CFGR MCOSEL (Microcontroller clock output)
enum {
    RCC_CFGR_MCOSEL_NOCLOCK_SETTING = 0x0,
    RCC_CFGR_MCOSEL_SYSCLK_SETTING = 0x1, // System clock selected as MCO source
    RCC_CFGR_MCOSEL_MSI_SETTING     = 0x2,
    RCC_CFGR_MCOSEL_HSI16_SETTING   = 0x3,
    RCC_CFGR_MCOSEL_HSE_SETTING     = 0x4,
    RCC_CFGR_MCOSEL_PLL_SETTING     = 0x5,
    RCC_CFGR_MCOSEL_LSI_SETTING     = 0x6,
    RCC_CFGR_MCOSEL_LSE_SETTING     = 0x7,
    RCC_CFGR_MCOSEL_HSI48_SETTING   = 0x8,

};

// RCC_CFGR MCOPRE (MCO prescaler)
enum {
    RCC_CFGR_MCOPRE_DIV1_SETTING  = 0x0,
    RCC_CFGR_MCOPRE_DIV2_SETTING  = 0x1,
    RCC_CFGR_MCOPRE_DIV4_SETTING  = 0x2,
    RCC_CFGR_MCOPRE_DIV8_SETTING  = 0x3,
    RCC_CFGR_MCOPRE_DIV16_SETTING = 0x4
};

// --- RCC_CFGR (Clock Configuration Register) ---
typedef struct
{
    uint32_t SW:2;
    uint32_t SWS:2;
    uint32_t HPRE:4;
    uint32_t PPRE1 : 3;
    uint32_t PPRE2:3;
    uint32_t res_1 : 1;
    uint32_t STOPWUCK:1;
    uint32_t res_2:8;
    uint32_t MCOSEL : 4;
    uint32_t MCOPRE : 3;
    uint32_t res_3:1;
} RCC_CFGR_B_t;

typedef union
{
    RCC_CFGR_B_t B;
    uint32_t U;
} RCC_CFGR_Reg_t;

extern volatile RCC_CFGR_Reg_t RCC_CFGR_Reg;

// RCC_PLLCFGR PLLSRC (Main PLL entry clock source)
enum {
    RCC_PLLCFGR_PLLSRC_NONE_SETTING  = 0x0, // No clock
    RCC_PLLCFGR_PLLSRC_MSI_SETTING   = 0x1, // MSI oscillator clock selected as PLL source
    RCC_PLLCFGR_PLLSRC_HSI16_SETTING = 0x2, // HSI16 oscillator clock selected as PLL source
    RCC_PLLCFGR_PLLSRC_HSE_SETTING   = 0x3  // HSE oscillator clock selected as PLL source
};

// RCC_PLLCFGR PLLM (Division factor for the main PLL input clock)
enum {
    RCC_PLLCFGR_PLLM_DIV1_SETTING = 0x1,
    RCC_PLLCFGR_PLLM_DIV2_SETTING = 0x2,
    RCC_PLLCFGR_PLLM_DIV3_SETTING = 0x3,
    RCC_PLLCFGR_PLLM_DIV4_SETTING = 0x4,
    RCC_PLLCFGR_PLLM_DIV5_SETTING = 0x5,
    RCC_PLLCFGR_PLLM_DIV6_SETTING = 0x6,
    RCC_PLLCFGR_PLLM_DIV7_SETTING = 0x7,
    RCC_PLLCFGR_PLLM_DIV8_SETTING = 0x8
};

// RCC_PLLCFGR PLLN (Main PLL multiplication factor for VCO, 8 bits: 8..86)
// Use direct value, e.g. .PLLN = 20

// RCC_PLLCFGR PLLQ (Main PLL division factor for PLLQ output)
enum {
    RCC_PLLCFGR_PLLQ_DIV2_SETTING = 0x0,
    RCC_PLLCFGR_PLLQ_DIV4_SETTING = 0x1,
    RCC_PLLCFGR_PLLQ_DIV6_SETTING = 0x2,
    RCC_PLLCFGR_PLLQ_DIV8_SETTING = 0x3
};

// RCC_PLLCFGR PLLR (Main PLL division factor for PLLR output)
enum {
    RCC_PLLCFGR_PLLR_DIV2_SETTING = 0x0,
    RCC_PLLCFGR_PLLR_DIV4_SETTING = 0x1,
    RCC_PLLCFGR_PLLR_DIV6_SETTING = 0x2,
    RCC_PLLCFGR_PLLR_DIV8_SETTING = 0x3
};

enum {
    RCC_PLLCFGR_PLL_REN_OFF = 0, // Main PLL disabled
    RCC_PLLCFGR_PLL_REN_ON  = 1  // Main PLL enabled
};

enum {
    RCC_PLLCFGR_PLLQEN_OFF = 0, // Main PLL disabled
    RCC_PLLCFGR_PLLQEN_ON  = 1  // Main PLL enabled
};

enum
{
    RCC_PLLCFGR_PLLEN_ON = 1, // Main PLL enabled
    RCC_PLLCFGR_PLLEN_OFF = 0 // Main PLL disabled
};

// --- RCC_PLLCFGR (PLL Configuration Register) ---
typedef struct
{
    uint32_t PLLSRC:2;
    uint32_t res_1:2;
    uint32_t PLLM : 3;
    uint32_t res_2:1;
    uint32_t PLLN : 8;
    uint32_t res_3:1;
    uint32_t PLLEN : 1;
    uint32_t PLLP:1;
    uint32_t res_4 : 2;
    uint32_t PLLQEN:1;
    uint32_t PLLQ : 2;
    uint32_t res_5:1;
    uint32_t PLL_REN:1;
    uint32_t PLLR : 2;
    uint32_t PLLDIV:5;
} RCC_PLLCFGR_B_t;

typedef union
{
    RCC_PLLCFGR_B_t B;
    uint32_t U;
} RCC_PLLCFGR_Reg_t;

extern volatile RCC_PLLCFGR_Reg_t RCC_PLLCFGR_Reg;

// RCC_PLLSAI1CFGR PLLSAI1N (PLLSAI1 multiplication factor for VCO, 7 bits: 8..86)
// Use direct value, e.g. .PLLSA1N = 24

// RCC_PLLSAI1CFGR PLLSAI1PEN (PLLSAI1 PLLP output enable)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1PEN_DISABLE_SETTING = 0,
    RCC_PLLSAI1CFGR_PLLSAI1PEN_ENABLE_SETTING  = 1
};

// RCC_PLLSAI1CFGR PLLSAI1P (PLLSAI1 division factor for PLLP output)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1P_DIV7_SETTING  = 0x0,
    RCC_PLLSAI1CFGR_PLLSAI1P_DIV17_SETTING = 0x1
}; 

// RCC_PLLSAI1CFGR PLLSAI1QEN (PLLSAI1 PLLQ output enable)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1QEN_DISABLE_SETTING = 0,
    RCC_PLLSAI1CFGR_PLLSAI1QEN_ENABLE_SETTING  = 1
};

// RCC_PLLSAI1CFGR PLLSAI1Q (PLLSAI1 division factor for PLLQ output)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1Q_DIV2_SETTING = 0x0,
    RCC_PLLSAI1CFGR_PLLSAI1Q_DIV4_SETTING = 0x1,
    RCC_PLLSAI1CFGR_PLLSAI1Q_DIV6_SETTING = 0x2,
    RCC_PLLSAI1CFGR_PLLSAI1Q_DIV8_SETTING = 0x3
};

// RCC_PLLSAI1CFGR PLLSAI1REN (PLLSAI1 PLLR output enable)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1REN_DISABLE_SETTING = 0,
    RCC_PLLSAI1CFGR_PLLSAI1REN_ENABLE_SETTING  = 1
};

enum
{
    RCC_PLLSAI1CFGR_PLLSAI1REN_ON_SETTING = 1, // PLLSAI1 enabled
    RCC_PLLSAI1CFGR_PLLSAI1REN_OFF_SETTING = 0 // PLLSAI1 disabled
};

enum
{
    RCC_PLLSAI1CFGR_PLLSAI1QEN_ON_SETTING = 1, // PLLSAI1Q enabled
    RCC_PLLSAI1CFGR_PLLSAI1QEN_OFF_SETTING = 0 // PLLSAI1Q disabled
};
// RCC_PLLSAI1CFGR PLLSAI1R (PLLSAI1 division factor for PLLR output)
enum {
    RCC_PLLSAI1CFGR_PLLSAI1R_DIV2_SETTING = 0x0,
    RCC_PLLSAI1CFGR_PLLSAI1R_DIV4_SETTING = 0x1,
    RCC_PLLSAI1CFGR_PLLSAI1R_DIV6_SETTING = 0x2,
    RCC_PLLSAI1CFGR_PLLSAI1R_DIV8_SETTING = 0x3,
};

// RCC_PLLSAI1CFGR PLLSAI1PDIV (PLLSAI1 division factor for PLLSAI1CLK output, 5 bits: 1..31)
// Use direct value, e.g. .PLLSA1PDIV = 7

// --- RCC_PLLSAI1CFGR (PLLSAI1 Configuration Register) ---
typedef struct
{
    uint32_t RES_1:8;
    uint32_t PLLSA1N : 7;
    uint32_t RES_2:1;
    uint32_t PLLSA1PEN : 1;
    uint32_t PLLSA1P:2;
    uint32_t RES_3 : 2;
    uint32_t PLLSA1QEN:1;
    uint32_t PLLSA1Q:2;
    uint32_t RES_4 : 1;
    uint32_t PLLSA1REN:1;
    uint32_t PLLSA1R:2;
    uint32_t PLLSA1PDIV:5;
} RCC_PLLSAI1CFGR_B_t;

typedef union
{
    RCC_PLLSAI1CFGR_B_t B;
    uint32_t U;
} RCC_PLLSAI1CFGR_Reg_t;

extern volatile RCC_PLLSAI1CFGR_Reg_t RCC_PLLSAI1CFGR_Reg;

// RCC_CIER LSIRDYIE (LSI ready interrupt enable)
enum { RCC_CIER_LSIRDYIE_DISABLE_SETTING = 0, RCC_CIER_LSIRDYIE_ENABLE_SETTING = 1 };

// RCC_CIER LSERDYIE (LSE ready interrupt enable)
enum { RCC_CIER_LSERDYIE_DISABLE_SETTING = 0, RCC_CIER_LSERDYIE_ENABLE_SETTING = 1 };

// RCC_CIER MSIRDYIE (MSI ready interrupt enable)
enum { RCC_CIER_MSIRDYIE_DISABLE_SETTING = 0, RCC_CIER_MSIRDYIE_ENABLE_SETTING = 1 };

// RCC_CIER HSIRDYIE (HSI16 ready interrupt enable)
enum { RCC_CIER_HSIRDYIE_DISABLE_SETTING = 0, RCC_CIER_HSIRDYIE_ENABLE_SETTING = 1 };

// RCC_CIER HSERDYIE (HSE ready interrupt enable)
enum { RCC_CIER_HSERDYIE_DISABLE_SETTING = 0, RCC_CIER_HSERDYIE_ENABLE_SETTING = 1 };

// RCC_CIER PLLRDYIE (PLL ready interrupt enable)
enum { RCC_CIER_PLLRDYIE_DISABLE_SETTING = 0, RCC_CIER_PLLRDYIE_ENABLE_SETTING = 1 };

// RCC_CIER PLLSAI1RDYIE (PLLSAI1 ready interrupt enable)
enum { RCC_CIER_PLLSAI1RDYIE_DISABLE_SETTING = 0, RCC_CIER_PLLSAI1RDYIE_ENABLE_SETTING = 1 };

// RCC_CIER LSECSSIE (LSE clock security system interrupt enable)
enum { RCC_CIER_LSECSSIE_DISABLE_SETTING = 0, RCC_CIER_LSECSSIE_ENABLE_SETTING = 1 };

// RCC_CIER HSI48RDYIE (HSI48 ready interrupt enable)
enum { RCC_CIER_HSI48RDYIE_DISABLE_SETTING = 0, RCC_CIER_HSI48RDYIE_ENABLE_SETTING = 1 };

// --- RCC_CIER (Clock Interrupt Enable Register) ---
typedef struct
{
    uint32_t LSIRDYIE:1;
    uint32_t LSERDYIE:1;
    uint32_t MSIRDYIE:1;
    uint32_t HSIRDYIE:1;
    uint32_t HSERDYIE:1;
    uint32_t PLLRDYIE:1;
    uint32_t PLLSAI1RDYIE:1;
    uint32_t RES_1:2;
    uint32_t LSECSSIE:1;
    uint32_t HSI48RDYIE : 1;
    uint32_t RES_2:21;
} RCC_CIER_B_t;

typedef union
{
    RCC_CIER_B_t B;
    uint32_t U;
} RCC_CIER_Reg_t;

extern volatile RCC_CIER_Reg_t RCC_CIER_Reg;

// RCC_CICR LSIRDYC (LSI ready interrupt clear)
enum { RCC_CICR_LSIRDYC_NOCLR_SETTING = 0, RCC_CICR_LSIRDYC_CLEAR_SETTING = 1 };

// RCC_CICR LSERDYC (LSE ready interrupt clear)
enum { RCC_CICR_LSERDYC_NOCLR_SETTING = 0, RCC_CICR_LSERDYC_CLEAR_SETTING = 1 };

// RCC_CICR MSIRDYC (MSI ready interrupt clear)
enum { RCC_CICR_MSIRDYC_NOCLR_SETTING = 0, RCC_CICR_MSIRDYC_CLEAR_SETTING = 1 };

// RCC_CICR HSIRDYC (HSI16 ready interrupt clear)
enum { RCC_CICR_HSIRDYC_NOCLR_SETTING = 0, RCC_CICR_HSIRDYC_CLEAR_SETTING = 1 };

// RCC_CICR HSERDYC (HSE ready interrupt clear)
enum { RCC_CICR_HSERDYC_NOCLR_SETTING = 0, RCC_CICR_HSERDYC_CLEAR_SETTING = 1 };

// RCC_CICR PLLRDYC (PLL ready interrupt clear)
enum { RCC_CICR_PLLRDYC_NOCLR_SETTING = 0, RCC_CICR_PLLRDYC_CLEAR_SETTING = 1 };

// RCC_CICR PLLSAI1RDYC (PLLSAI1 ready interrupt clear)
enum { RCC_CICR_PLLSAI1RDYC_NOCLR_SETTING = 0, RCC_CICR_PLLSAI1RDYC_CLEAR_SETTING = 1 };

// RCC_CICR CSSC (Clock security system interrupt clear)
enum { RCC_CICR_CSSC_NOCLR_SETTING = 0, RCC_CICR_CSSC_CLEAR_SETTING = 1 };

// RCC_CICR LSECSSC (LSE clock security system interrupt clear)
enum { RCC_CICR_LSECSSC_NOCLR_SETTING = 0, RCC_CICR_LSECSSC_CLEAR_SETTING = 1 };

// RCC_CICR HSI48RDYC (HSI48 ready interrupt clear)
enum { RCC_CICR_HSI48RDYC_NOCLR_SETTING = 0, RCC_CICR_HSI48RDYC_CLEAR_SETTING = 1};

// --- RCC_CICR (Clock Interrupt Clear Register) ---
typedef struct
{
    uint32_t LSIRDYC:1;
    uint32_t LSERDYC:1;
    uint32_t MSIRDYC:1;
    uint32_t HSIRDYC:1;
    uint32_t HSERDYC:1;
    uint32_t PLLRDYC:1;
    uint32_t PLLSAI1RDYC:1;
    uint32_t RES_1:1;
    uint32_t CSSC:1;
    uint32_t LSECSSC:1;
    uint32_t HSI48RDYC:1;         
    uint32_t RES_2 : 21;
} RCC_CICR_B_t;

typedef union
{
    RCC_CICR_B_t B;
    uint32_t U;
} RCC_CICR_Reg_t;

extern volatile RCC_CICR_Reg_t RCC_CICR_Reg;

// RCC_AHB1RSTR DMA1RST (DMA1 reset)
enum { RCC_AHB1RSTR_DMA1RST_NO_SETTING = 0, RCC_AHB1RSTR_DMA1RST_RESET_SETTING = 1 };

// RCC_AHB1RSTR DMA2RST (DMA2 reset)
enum { RCC_AHB1RSTR_DMA2RST_NO_SETTING = 0, RCC_AHB1RSTR_DMA2RST_RESET_SETTING = 1 };

// RCC_AHB1RSTR FLASHRST (Flash memory interface reset)
enum { RCC_AHB1RSTR_FLASHRST_NO_SETTING = 0, RCC_AHB1RSTR_FLASHRST_RESET_SETTING = 1 };

// RCC_AHB1RSTR CRCRST (CRC reset)
enum { RCC_AHB1RSTR_CRCRST_NO_SETTING = 0, RCC_AHB1RSTR_CRCRST_RESET_SETTING = 1 };

// RCC_AHB1RSTR TSCRST (Touch sensing controller reset)
enum { RCC_AHB1RSTR_TSCRST_NO_SETTING = 0, RCC_AHB1RSTR_TSCRST_RESET_SETTING = 1};
// --- RCC_AHB1RSTR (AHB1 Peripheral Reset Register) ---
typedef struct
{
    uint32_t DMA1RST:1;
    uint32_t DMA2RST:1;
    uint32_t RES_1 : 6;
    uint32_t FLASHRST:1;
    uint32_t RES2 : 3;
    uint32_t CRCRST:1;
    uint32_t RES3 : 3;
    uint32_t TSCRST:1;
    uint32_t RES4 : 14;
} RCC_AHB1RSTR_B_t;

typedef union
{
    RCC_AHB1RSTR_B_t B;
    uint32_t U;
} RCC_AHB1RSTR_Reg_t;

extern volatile RCC_AHB1RSTR_Reg_t RCC_AHB1RSTR_Reg;

// RCC_AHB2RSTR GPIOARST (GPIOA reset)
enum { RCC_AHB2RSTR_GPIOARST_NO_SETTING = 0, RCC_AHB2RSTR_GPIOARST_RESET_SETTING = 1 };

// RCC_AHB2RSTR GPIOBRST (GPIOB reset)
enum { RCC_AHB2RSTR_GPIOBRST_NO_SETTING = 0, RCC_AHB2RSTR_GPIOBRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR GPIOCRST (GPIOC reset)
enum { RCC_AHB2RSTR_GPIOCRST_NO_SETTING = 0, RCC_AHB2RSTR_GPIOCRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR GPIODRST (GPIOD reset)
enum { RCC_AHB2RSTR_GPIODRST_NO_SETTING = 0, RCC_AHB2RSTR_GPIODRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR GPOIERST (GPIOE reset)
enum { RCC_AHB2RSTR_GPIOERST_NO_SETTING = 0, RCC_AHB2RSTR_GPIOERST_RESET_SETTING = 1 };

// RCC_AHB2RSTR GPIOHRST (GPIOH reset)
enum { RCC_AHB2RSTR_GPIOHRST_NO_SETTING = 0, RCC_AHB2RSTR_GPIOHRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR ADCRST (ADC reset)
enum { RCC_AHB2RSTR_ADCRST_NO_SETTING = 0, RCC_AHB2RSTR_ADCRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR AESRST (AES reset)
enum { RCC_AHB2RSTR_AESRST_NO_SETTING = 0, RCC_AHB2RSTR_AESRST_RESET_SETTING = 1 };

// RCC_AHB2RSTR RNGRST (RNG reset)
enum { RCC_AHB2RSTR_RNGRST_NO_SETTING = 0, RCC_AHB2RSTR_RNGRST_RESET_SETTING = 1};
// --- RCC_AHB2RSTR (AHB2 Peripheral Reset Register) ---
typedef struct
{
    uint32_t GPIOARST:1;
    uint32_t GPIOBRST:1;
    uint32_t GPIOCRST:1;
    uint32_t GPIODRST:1;
    uint32_t GPIOERST:1;
    uint32_t res1 : 2;
    uint32_t GPIOHRST:1;
    uint32_t res2 : 5;
    uint32_t ADCRST:1;
    uint32_t res3 : 2;
    uint32_t AESRST:1;
    uint32_t res4 : 1;
    uint32_t RNGRST:1;
    uint32_t res5 : 13;
} RCC_AHB2RSTR_B_t;

typedef union
{
    RCC_AHB2RSTR_B_t B;
    uint32_t U;
} RCC_AHB2RSTR_Reg_t;

extern volatile RCC_AHB2RSTR_Reg_t RCC_AHB2RSTR_Reg;

// RCC_AHB3RSTR QSPIRST (Quad SPI memory interface reset)
enum { RCC_AHB3RSTR_QSPIRST_NO_SETTING = 0, RCC_AHB3RSTR_QSPIRST_RESET_SETTING = 1 };
// --- RCC_AHB3RSTR (AHB3 Peripheral Reset Register) ---
typedef struct
{
    uint32_t res1 : 8;
    uint32_t QSPIRST:1;
    uint32_t res2 : 23;
} RCC_AHB3RSTR_B_t;

typedef union
{
    RCC_AHB3RSTR_B_t B;
    uint32_t U;
} RCC_AHB3RSTR_Reg_t;

extern volatile RCC_AHB3RSTR_Reg_t RCC_AHB3RSTR_Reg;

// RCC_APB1RSTR1 TIM2RST (TIM2 timer reset)
enum { RCC_APB1RSTR1_TIM2RST_NO_SETTING = 0, RCC_APB1RSTR1_TIM2RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 TIM3RST (TIM3 timer reset)
enum { RCC_APB1RSTR1_TIM3RST_NO_SETTING = 0, RCC_APB1RSTR1_TIM3RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 TIM6RST (TIM6 timer reset)
enum { RCC_APB1RSTR1_TIM6RST_NO_SETTING = 0, RCC_APB1RSTR1_TIM6RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 TIM7RST (TIM7 timer reset)
enum { RCC_APB1RSTR1_TIM7RST_NO_SETTING = 0, RCC_APB1RSTR1_TIM7RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 LCDRST (LCD reset)
enum { RCC_APB1RSTR1_LCDRST_NO_SETTING = 0, RCC_APB1RSTR1_LCDRST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 SPI2RST (SPI2 reset)
enum { RCC_APB1RSTR1_SPI2RST_NO_SETTING = 0, RCC_APB1RSTR1_SPI2RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 SPI3RST (SPI3 reset)
enum { RCC_APB1RSTR1_SPI3RST_NO_SETTING = 0, RCC_APB1RSTR1_SPI3RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 USART2RST (USART2 reset)
enum { RCC_APB1RSTR1_USART2RST_NO_SETTING = 0, RCC_APB1RSTR1_USART2RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 USART3RST (USART3 reset)
enum { RCC_APB1RSTR1_USART3RST_NO_SETTING = 0, RCC_APB1RSTR1_USART3RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 UART4RST (UART4 reset)
enum { RCC_APB1RSTR1_UART4RST_NO_SETTING = 0, RCC_APB1RSTR1_UART4RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 I2C1RST (I2C1 reset)
enum { RCC_APB1RSTR1_I2C1RST_NO_SETTING = 0, RCC_APB1RSTR1_I2C1RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 I2C2RST (I2C2 reset)
enum { RCC_APB1RSTR1_I2C2RST_NO_SETTING = 0, RCC_APB1RSTR1_I2C2RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 I2C3RST (I2C3 reset)
enum { RCC_APB1RSTR1_I2C3RST_NO_SETTING = 0, RCC_APB1RSTR1_I2C3RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 CRSRST (CRS reset)
enum { RCC_APB1RSTR1_CRSRST_NO_SETTING = 0, RCC_APB1RSTR1_CRSRST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 CANRST (CAN reset)
enum { RCC_APB1RSTR1_CAN1RST_NO_SETTING = 0, RCC_APB1RSTR1_CAN1RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 USBFSRST (USB FS reset)
enum { RCC_APB1RSTR1_USBFSRST_NO_SETTING = 0, RCC_APB1RSTR1_USBFSRST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 PWRRST (PWR interface reset)
enum { RCC_APB1RSTR1_PWRRST_NO_SETTING = 0, RCC_APB1RSTR1_PWRRST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 DACRST (DAC reset)
enum { RCC_APB1RSTR1_DACRST_NO_SETTING = 0, RCC_APB1RSTR1_DACRST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 OPAMPRST (OPAMP reset)
enum { RCC_APB1RSTR1_OPAMP1RST_NO_SETTING = 0, RCC_APB1RSTR1_OPAMP1RST_RESET_SETTING = 1 };

// RCC_APB1RSTR1 LPTIM1RST (LPTIM1 reset)
enum { RCC_APB1RSTR1_LPTIM1RST_NO_SETTING = 0, RCC_APB1RSTR1_LPTIM1RST_RESET_SETTING = 1};

// --- RCC_APB1RSTR1 (APB1 Peripheral Reset Register 1) ---
typedef struct
{
    uint32_t TIM2RST:1;
    uint32_t TIM3RST:1;
    uint32_t RES_1:2;
    uint32_t TIM6RST:1;
    uint32_t TIM7RST:1;
    uint32_t RES_2:3;
    uint32_t LCDRST : 1;
    uint32_t RES_3:4;
    uint32_t SPI2RST:1;
    uint32_t SPI3RST:1;
    uint32_t res3 : 1;
    uint32_t USART2RST:1;
    uint32_t USART3RST:1;
    uint32_t UART4RST:1;
    uint32_t RES_4:1;
    uint32_t I2C1RST:1;
    uint32_t I2C2RST:1;
    uint32_t I2C3RST:1;
    uint32_t CRSRST:1;
    uint32_t CAN1RST : 1;
    uint32_t USBFSRST:1;
    uint32_t RES_5:1;
    uint32_t PWRRST : 1;
    uint32_t DACRST:1;
    uint32_t OPAMP1RST : 1;
    uint32_t LPTIM1RST : 1;
} RCC_APB1RSTR1_B_t;

typedef union
{
    RCC_APB1RSTR1_B_t B;
    uint32_t U;
} RCC_APB1RSTR1_Reg_t;

extern volatile RCC_APB1RSTR1_Reg_t RCC_APB1RSTR1_Reg;

// RCC_APB1RSTR2 LPUART1RST (LPUART1 reset)
enum { RCC_APB1RSTR2_LPUART1RST_NO_SETTING = 0, RCC_APB1RSTR2_LPUART1RST_RESET_SETTING = 1 };

// RCC_APB1RSTR2 I2C4RST (I2C4 reset)
enum { RCC_APB1RSTR2_I2C4RST_NO_SETTING = 0, RCC_APB1RSTR2_I2C4RST_RESET_SETTING = 1 };

// RCC_APB1RSTR2 SWPMI1RST (SWPMI1 reset)
enum { RCC_APB1RSTR2_SWPMI1RST_NO_SETTING = 0, RCC_APB1RSTR2_SWPMI1RST_RESET_SETTING = 1 };

// RCC_APB1RSTR2 LPTIM2RST (LPTIM2 reset)
enum { RCC_APB1RSTR2_LPTIM2RST_NO_SETTING = 0, RCC_APB1RSTR2_LPTIM2RST_RESET_SETTING = 1 };
// --- RCC_APB1RSTR2 (APB1 Peripheral Reset Register 2) ---
typedef struct
{
    uint32_t LPUART1RST : 1;
    uint32_t I2C4RST:1;
    uint32_t SWPMI1RST : 1;
    uint32_t RES_1:2;
    uint32_t LPTIM2RST : 1;
    uint32_t RES_2:26;
} RCC_APB1RSTR2_B_t;

typedef union
{
    RCC_APB1RSTR2_B_t B;
    uint32_t U;
} RCC_APB1RSTR2_Reg_t;

extern volatile RCC_APB1RSTR2_Reg_t RCC_APB1RSTR2_Reg;

// RCC_APB2RSTR SYSCFGRST (System configuration controller reset)
enum { RCC_APB2RSTR_SYSCFGRST_NO_SETTING = 0, RCC_APB2RSTR_SYSCFGRST_RESET_SETTING = 1 };

// RCC_APB2RSTR SDMMCRST (SDMMC reset)
enum { RCC_APB2RSTR_SDMMCRST_NO_SETTING = 0, RCC_APB2RSTR_SDMMCRST_RESET_SETTING = 1 };

// RCC_APB2RSTR TIM1RST (TIM1 timer reset)
enum { RCC_APB2RSTR_TIM1RST_NO_SETTING = 0, RCC_APB2RSTR_TIM1RST_RESET_SETTING = 1 };

// RCC_APB2RSTR SPI1RST (SPI1 reset)
enum { RCC_APB2RSTR_SPI1RST_NO_SETTING = 0, RCC_APB2RSTR_SPI1RST_RESET_SETTING = 1 };

// RCC_APB2RSTR UART1RST (USART1 reset)
enum { RCC_APB2RSTR_USART1RST_NO_SETTING = 0, RCC_APB2RSTR_USART1RST_RESET_SETTING = 1 };

// RCC_APB2RSTR TIM15RST (TIM15 timer reset)
enum { RCC_APB2RSTR_TIM15RST_NO_SETTING = 0, RCC_APB2RSTR_TIM15RST_RESET_SETTING = 1 };

// RCC_APB2RSTR TIM16RST (TIM16 timer reset)
enum { RCC_APB2RSTR_TIM16RST_NO_SETTING = 0, RCC_APB2RSTR_TIM16RST_RESET_SETTING = 1 };

// RCC_APB2RSTR SA1RST (SAI1 reset)
enum { RCC_APB2RSTR_SA1RST_NO_SETTING = 0, RCC_APB2RSTR_SA1RST_RESET_SETTING = 1 };

// RCC_APB2RSTR DFSDM1RST (DFSDM1 reset)
enum { RCC_APB2RSTR_DFSDM1RST_NO_SETTING = 0, RCC_APB2RSTR_DFSDMRST_RESET_SETTING = 1 };
// --- RCC_APB2RSTR (APB2 Peripheral Reset Register) ---
typedef struct
{
    uint32_t SYSCFGRST:1;
    uint32_t RES_1 : 9;
    uint32_t SDMMCRST:1;
    uint32_t TIM1RST:1;
    uint32_t SPI1RST : 1;
    uint32_t RES_2:1;
    uint32_t USART1RST : 1;
    uint32_t RES_3:1;
    uint32_t TIM15RST : 1;
    uint32_t TIM16RST:1;
    uint32_t RES_4:3;
    uint32_t SAI1RST : 1;
    uint32_t RES_5:2;
    uint32_t DFSDMRST:1;
    uint32_t RES_6 : 7;
} RCC_APB2RSTR_B_t;

typedef union
{
    RCC_APB2RSTR_B_t B;
    uint32_t U;
} RCC_APB2RSTR_Reg_t;

extern volatile RCC_APB2RSTR_Reg_t RCC_APB2RSTR_Reg;

// RCC_AHB1ENR DMA1_EN (DMA1 clock enable)
enum { RCC_AHB1ENR_DMA1_EN_OFF_SETTING = 0, RCC_AHB1ENR_DMA1_EN_ON_SETTING = 1 };

// RCC_AHB1ENR DMA2_EN (DMA2 clock enable)
enum { RCC_AHB1ENR_DMA2_EN_OFF_SETTING = 0, RCC_AHB1ENR_DMA2_EN_ON_SETTING = 1 };

// RCC_AHB1ENR FLASH_EN (Flash memory interface clock enable)
enum { RCC_AHB1ENR_FLASH_EN_OFF_SETTING = 0, RCC_AHB1ENR_FLASH_EN_ON_SETTING = 1 };

// RCC_AHB1ENR CRC_EN (CRC clock enable)
enum { RCC_AHB1ENR_CRC_EN_OFF_SETTING = 0, RCC_AHB1ENR_CRC_EN_ON_SETTING = 1 };

// RCC_AHB1ENR TSC_EN (Touch sensing controller clock enable)
enum { RCC_AHB1ENR_TSC_EN_OFF_SETTING = 0, RCC_AHB1ENR_TSC_EN_ON_SETTING = 1 };
// --- RCC_AHB1ENR (AHB1 Peripheral Clock Enable Register) ---
typedef struct
{
    uint32_t DMA1_EN:1;
    uint32_t DMA2_EN:1;
    uint32_t res2 : 6;
    uint32_t FLASH_EN:1;
    uint32_t res3 : 3;
    uint32_t CRC_EN:1;
    uint32_t res4 : 3;
    uint32_t TSC_EN:1;
    uint32_t res5 : 15;
} RCC_AHB1ENR_B_t;

typedef union
{
    RCC_AHB1ENR_B_t B;
    uint32_t U;
} RCC_AHB1ENR_Reg_t;

extern volatile RCC_AHB1ENR_Reg_t RCC_AHB1ENR_Reg;

// RCC_AHB2ENR GPIOA_EN (GPIOA clock enable)
enum { RCC_AHB2ENR_GPIOA_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOA_EN_ON_SETTING = 1 };

// RCC_AHB2ENR GPIOB_EN (GPIOB clock enable)
enum { RCC_AHB2ENR_GPIOB_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOB_EN_ON_SETTING = 1 };

// RCC_AHB2ENR GPIOC_EN (GPIOC clock enable)
enum { RCC_AHB2ENR_GPIOC_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOC_EN_ON_SETTING = 1 };

// RCC_AHB2ENR GPIOD_EN (GPIOD clock enable)
enum { RCC_AHB2ENR_GPIOD_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOD_EN_ON_SETTING = 1 };

// RCC_AHB2ENR GPIOE_EN (GPIOE clock enable)
enum { RCC_AHB2ENR_GPIOE_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOE_EN_ON_SETTING = 1 };

// RCC_AHB2ENR GPIOH_EN (GPIOH clock enable)
enum { RCC_AHB2ENR_GPIOH_EN_OFF_SETTING = 0, RCC_AHB2ENR_GPIOH_EN_ON_SETTING = 1 };

// RCC_AHB2ENR ADC_EN (ADC clock enable)
enum { RCC_AHB2ENR_ADC_EN_OFF_SETTING = 0, RCC_AHB2ENR_ADC_EN_ON_SETTING = 1 };

// RCC_AHB2ENR AES_EN (AES clock enable)
enum { RCC_AHB2ENR_AES_EN_OFF_SETTING = 0, RCC_AHB2ENR_AES_EN_ON_SETTING = 1 };

// RCC_AHB2ENR RNG_B (RNG clock enable)
enum { RCC_AHB2ENR_RNG_B_OFF_SETTING = 0, RCC_AHB2ENR_RNG_B_ON_SETTING = 1 };
// --- RCC_AHB2ENR (AHB2 Peripheral Clock Enable Register) ---
// (Your original example, included for completeness)
typedef struct
{
    uint32_t GPIOA_EN:1;
    uint32_t GPIOB_EN:1;
    uint32_t GPIOC_EN:1;
    uint32_t GPIOD_EN:1;
    uint32_t GPIOE_EN:1;
    uint32_t res1 : 2;
    uint32_t GPIOH_EN:1;
    uint32_t res2 : 5;
    uint32_t ADC_EN:1;
    uint32_t res3 : 2;
    uint32_t AES_EN:1;
    uint32_t res4 : 1;
    uint32_t RNG_B:1; 
    uint32_t res5 : 13;
}RCC_AHB2ENR_B_t;

typedef union
{
    RCC_AHB2ENR_B_t B;
    uint32_t U;
}RCC_AHB2ENR_Reg_t;

extern volatile RCC_AHB2ENR_Reg_t RCC_AHB2ENR_Reg;

// RCC_AHB3ENR QSPI_EN (Quad SPI memory interface clock enable)
enum { RCC_AHB3ENR_QSPI_EN_OFF_SETTING = 0, RCC_AHB3ENR_QSPI_EN_ON_SETTING = 1 };
// --- RCC_AHB3ENR (AHB3 Peripheral Clock Enable Register) ---
typedef struct
{
    uint32_t res1 : 8;
    uint32_t QSPI_EN:1;
    uint32_t res2 : 23;
} RCC_AHB3ENR_B_t;

typedef union
{
    RCC_AHB3ENR_B_t B;
    uint32_t U;
} RCC_AHB3ENR_Reg_t;

extern volatile RCC_AHB3ENR_Reg_t RCC_AHB3ENR_Reg;

// RCC_APB1ENR1 TIM2_EN (TIM2 clock enable)
enum { RCC_APB1ENR1_TIM2_EN_OFF_SETTING = 0, RCC_APB1ENR1_TIM2EN_ON_SETTING = 1 };

// RCC_APB1ENR1 TIM3_EN (TIM3 clock enable)
enum { RCC_APB1ENR1_TIM3_EN_OFF_SETTING = 0, RCC_APB1ENR1_TIM3EN_ON_SETTING = 1 };

// RCC_APB1ENR1 TIM6_EN (TIM6 clock enable)
enum { RCC_APB1ENR1_TIM6_EN_OFF_SETTING = 0, RCC_APB1ENR1_TIM6EN_ON_SETTING = 1 };

// RCC_APB1ENR1 TIM7_EN (TIM7 clock enable)
enum { RCC_APB1ENR1_TIM7_EN_OFF_SETTING = 0, RCC_APB1ENR1_TIM7EN_ON_SETTING = 1 };

// RCC_APB1ENR1 LCDEN (LCD clock enable)
enum { RCC_APB1ENR1_LCDEN_OFF_SETTING = 0, RCC_APB1ENR1_LCDEN_ON_SETTING = 1 };

// RCC_APB1ENR1 RTCAPBEM (RTC APB clock enable)
enum { RCC_APB1ENR1_RTCAPBEN_OFF_SETTING = 0, RCC_APB1ENR1_RTCAPBEN_ON_SETTING = 1 };

// RCC_APB1ENR1 WWDGEN (Window watchdog clock enable)
enum { RCC_APB1ENR1_WWDGEN_OFF_SETTING = 0, RCC_APB1ENR1_WWDGEN_ON_SETTING = 1 };

// RCC_APB1ENR1 SPI2_EN (SPI2 clock enable)
enum { RCC_APB1ENR1_SPI2_EN_OFF_SETTING = 0, RCC_APB1ENR1_SPI2EN_ON_SETTING = 1 };

// RCC_APB1ENR1 SPI3_EN (SPI3 clock enable)
enum { RCC_APB1ENR1_SPI3_EN_OFF_SETTING = 0, RCC_APB1ENR1_SPI3EN_ON_SETTING = 1 };

// RCC_APB1ENR1 USART2_EN (USART2 clock enable)
enum { RCC_APB1ENR1_USART2_EN_OFF_SETTING = 0, RCC_APB1ENR1_USART2EN_ON_SETTING = 1 };

// RCC_APB1ENR1 USART3_EN (USART3 clock enable)
enum { RCC_APB1ENR1_USART3_EN_OFF_SETTING = 0, RCC_APB1ENR1_USART3EN_ON_SETTING = 1 };

// RCC_APB1ENR1 UART4_EN (UART4 clock enable)
enum { RCC_APB1ENR1_UART4_EN_OFF_SETTING = 0, RCC_APB1ENR1_UART4EN_ON_SETTING = 1 };

// RCC_APB1ENR1 I2C1_EN (I2C1 clock enable)
enum { RCC_APB1ENR1_I2C1_EN_OFF_SETTING = 0, RCC_APB1ENR1_I2C1EN_ON_SETTING = 1 };

// RCC_APB1ENR1 I2C2_EN (I2C2 clock enable)
enum { RCC_APB1ENR1_I2C2_EN_OFF_SETTING = 0, RCC_APB1ENR1_I2C2EN_ON_SETTING = 1 };

// RCC_APB1ENR1 I2C3_EN (I2C3 clock enable)
enum { RCC_APB1ENR1_I2C3_EN_OFF_SETTING = 0, RCC_APB1ENR1_I2C3EN_ON_SETTING = 1 };

// RCC_APB1ENR1 CRS_EN (CRS clock enable)
enum { RCC_APB1ENR1_CRS_EN_OFF_SETTING = 0, RCC_APB1ENR1_CRSEN_ON_SETTING = 1 };

// RCC_APB1ENR1 CAN1EN (CAN1 clock enable)
enum { RCC_APB1ENR1_CAN1EN_OFF_SETTING = 0, RCC_APB1ENR1_CAN1EN_ON_SETTING = 1 };

// RCC_APB1ENR1 USBFSEN (USB FS clock enable)
enum { RCC_APB1ENR1_USBFSEN_OFF_SETTING = 0, RCC_APB1ENR1_USBFSEN_ON_SETTING = 1 };

// RCC_APB1ENR1 PWREN (PWR interface clock enable)
enum { RCC_APB1ENR1_PWREN_OFF_SETTING = 0, RCC_APB1ENR1_PWREN_ON_SETTING = 1 };

// RCC_APB1ENR1 DACEN (DAC clock enable)
enum { RCC_APB1ENR1_DACEN_OFF_SETTING = 0, RCC_APB1ENR1_DACEN_ON_SETTING = 1 };

// RCC_APB1ENR1 OPAMPEN (OPAMP clock enable)
enum { RCC_APB1ENR1_OPAMPEN_OFF_SETTING = 0, RCC_APB1ENR1_OPAMPEN_ON_SETTING = 1 };

// RCC_APB1ENR1 LPTIM1EN (LPTIM1 clock enable)
enum { RCC_APB1ENR1_LPTIM1EN_OFF_SETTING = 0, RCC_APB1ENR1_LPTIM1EN_ON_SETTING = 1 };
// --- RCC_APB1ENR1 (APB1 Peripheral Clock Enable Register 1) ---
typedef struct
{
    uint32_t TIM2EN:1;
    uint32_t TIM3EN:1;
    uint32_t RES_1:2;
    uint32_t TIM6EN:1;
    uint32_t TIM7EN:1;
    uint32_t RES_2:3;
    uint32_t LCDEN : 5;
    uint32_t RTCAPBEN:1;
    uint32_t WWDGEN : 2;
    uint32_t RES_3:2;
    uint32_t SPI2EN:1;
    uint32_t SPI3EN : 1;
    uint32_t RES_4:1;
    uint32_t USART2EN:1;
    uint32_t USART3EN:1;
    uint32_t UART4EN:1;
    uint32_t RES_5:1;
    uint32_t I2C1EN:1;
    uint32_t I2C2EN:1;
    uint32_t I2C3EN : 1;
    uint32_t CRSEN:1;
    uint32_t CAN1EN : 1;
    uint32_t USBFSEN:1;
    uint32_t RES_6:1;
    uint32_t PWREN : 1;
    uint32_t DACEN:1;
    uint32_t OPAMPEN : 1;
    uint32_t LPTIM1EN : 1;
} RCC_APB1ENR1_B_t;

typedef union
{
    RCC_APB1ENR1_B_t B;
    uint32_t U;
} RCC_APB1ENR1_Reg_t;

extern volatile RCC_APB1ENR1_Reg_t RCC_APB1ENR1_Reg;

// RCC_APB1ENR2 LPUART1EN (LPUART1 clock enable)
enum { RCC_APB1ENR2_LPUART1EN_OFF_SETTING = 0, RCC_APB1ENR2_LPUART1EN_ON_SETTING = 1 };

// RCC_APB1ENR2 I2C4EN (I2C4 clock enable)
enum { RCC_APB1ENR2_I2C4EN_OFF_SETTING = 0, RCC_APB1ENR2_I2C4EN_ON_SETTING = 1 };

// RCC_APB1ENR2 SWPMI1_EN (SWPMI1 clock enable)
enum { RCC_APB1ENR2_SWPMI1EN_OFF_SETTING = 0, RCC_APB1ENR2_SWPMI1EN_ON_SETTING = 1 };

// RCC_APB1ENR2 LPTIM2EN (LPTIM2 clock enable)
enum { RCC_APB1ENR2_LPTIM2EN_OFF_SETTING = 0, RCC_APB1ENR2_LPTIM2EN_ON_SETTING = 1 };
// --- RCC_APB1ENR2 (APB1 Peripheral Clock Enable Register 2) ---
typedef struct
{
    uint32_t LPUART1EN : 1;
    uint32_t I2C4EN:1;
    uint32_t SWPMI1EN:1;
    uint32_t res3 : 2;
    uint32_t LPTIM2EN:1;
    uint32_t res4 : 26;
} RCC_APB1ENR2_B_t;

typedef union
{
    RCC_APB1ENR2_B_t B;
    uint32_t U;
} RCC_APB1ENR2_Reg_t;

extern volatile RCC_APB1ENR2_Reg_t RCC_APB1ENR2_Reg;

// RCC_APB2ENR SYSCFG_EN (System configuration controller clock enable)
enum { RCC_APB2ENR_SYSCFGEN_OFF_SETTING = 0, RCC_APB2ENR_SYSCFGEN_ON_SETTING = 1 };

// RCC_APB2ENR FW_EN (Firewall clock enable)
enum { RCC_APB2ENR_FW_EN_OFF_SETTING = 0, RCC_APB2ENR_FW_EN_ON_SETTING = 1 };

// RCC_APB2ENR SDMMC1EN (SDMMC1 clock enable)
enum { RCC_APB2ENR_SDMMCEN_OFF_SETTING = 0, RCC_APB2ENR_SDMMCEN_ON_SETTING = 1 };

// RCC_APB2ENR TIM1EN (TIM1 timer clock enable)
enum { RCC_APB2ENR_TIM1EN_OFF_SETTING = 0, RCC_APB2ENR_TIM1EN_ON_SETTING = 1 };

// RCC_APB2ENR SPI1EN (SPI1 clock enable)
enum { RCC_APB2ENR_SPI1EN_OFF_SETTING = 0, RCC_APB2ENR_SPI1EN_ON_SETTING = 1 };

// RCC_APB2ENR USART1EN (USART1 clock enable)
enum { RCC_APB2ENR_USART1EN_OFF_SETTING = 0, RCC_APB2ENR_USART1EN_ON_SETTING = 1 };

// RCC_APB2ENR TIM15EN (TIM15 timer clock enable)
enum { RCC_APB2ENR_TIM15EN_OFF_SETTING = 0, RCC_APB2ENR_TIM15EN_ON_SETTING = 1 };

// RCC_APB2ENR TIME16EN (TIM16 timer clock enable)
enum { RCC_APB2ENR_TIME16EN_OFF_SETTING = 0, RCC_APB2ENR_TIM16EN_ON_SETTING = 1 };

// RCC_APB2ENR SAI1EN (SAI1 clock enable)
enum { RCC_APB2ENR_SAI1EN_OFF_SETTING = 0, RCC_APB2ENR_SAI1EN_ON_SETTING = 1 };

// RCC_APB2ENR DFSDM1EN (DFSDM1 clock enable)
enum { RCC_APB2ENR_DFSDM1EN_OFF_SETTING = 0, RCC_APB2ENR_DFSDM1EN_ON_SETTING = 1 };
// --- RCC_APB2ENR (APB2 Peripheral Clock Enable Register) ---
typedef struct
{
    uint32_t SYSCFGEN:1;
    uint32_t res1 : 6;
    uint32_t FW_EN:1;
    uint32_t RES2:2;
    uint32_t SDMMCEN : 1;
    uint32_t TIM1EN:1;
    uint32_t SPI1EN : 1;
    uint32_t RES:1;
    uint32_t USART1EN : 1;
    uint32_t RES_2:1;
    uint32_t TIM15EN:1;
    uint32_t TIM16EN : 1;
    uint32_t RES_3:3;
    uint32_t SAI1EN:1;
    uint32_t RES_4:2;
    uint32_t DFSDM1EN : 1;
    uint32_t res8 : 7;
} RCC_APB2ENR_B_t;

typedef union
{
    RCC_APB2ENR_B_t B;
    uint32_t U;
} RCC_APB2ENR_Reg_t;

extern volatile RCC_APB2ENR_Reg_t RCC_APB2ENR_Reg;

// RCC_AHB1SMENR DMA1SMEN (DMA1 clock enable during Sleep)
enum { RCC_AHB1SMENR_DMA1SMEN_OFF_SETTING = 0, RCC_AHB1SMENR_DMA1SMEN_ON_SETTING = 1 };

// RCC_AHB1SMENR DMA2SMEN (DMA2 clock enable during Sleep)
enum { RCC_AHB1SMENR_DMA2SMEN_OFF_SETTING = 0, RCC_AHB1SMENR_DMA2SMEN_ON_SETTING = 1 };

// RCC_AHB1SMENR FLASHSMEN (Flash memory interface clock enable during Sleep)
enum { RCC_AHB1SMENR_FLASHSMEN_OFF_SETTING = 0, RCC_AHB1SMENR_FLASHSMEN_ON_SETTING = 1 };

// RCC_AHB1SMENR SRAM1EN (SRAM1 clock enable during Sleep)
enum { RCC_AHB1SMENR_SRAM1EN_OFF_SETTING = 0, RCC_AHB1SMENR_SRAM1EN_ON_SETTING = 1 };

// RCC_AHB1SMENR CRCSMEN (CRC clock enable during Sleep)
enum { RCC_AHB1SMENR_CRCSMEN_OFF_SETTING = 0, RCC_AHB1SMENR_CRCSMEN_ON_SETTING = 1 };

// RCC_AHB1SMENR TSCSMEN (Touch sensing controller clock enable during Sleep)
enum { RCC_AHB1SMENR_TSCSMEN_OFF_SETTING = 0, RCC_AHB1SMENR_TSCSMEN_ON_SETTING = 1 };
// --- RCC_AHB1SMENR (AHB1 Peripheral Clock Enable in Sleep Mode Register) ---
typedef struct
{
    uint32_t DMA1SMEN:1;
    uint32_t DMA2SMEN:1;
    uint32_t res2 : 6;
    uint32_t FLASHSMEN:1;
    uint32_t SRAM1EN : 1;
    uint32_t res3:2;
    uint32_t CRCSMEN : 1;
    uint32_t res4:3;
    uint32_t TSCSMEN : 1;
    uint32_t res5:15;
} RCC_AHB1SMENR_B_t;

typedef union
{
    RCC_AHB1SMENR_B_t B;
    uint32_t U;
} RCC_AHB1SMENR_Reg_t;

extern volatile RCC_AHB1SMENR_Reg_t RCC_AHB1SMENR_Reg;

// RCC_AHB2SMENR GPIOASMEN (GPIOA clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIOASMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIOASMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR GPIOBSMEN (GPIOB clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIOBSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIOBSMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR GPIOCSMEN (GPIOC clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIOCSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIOCSMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR GPIODSMEN (GPIOD clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIODSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIODSMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR GPOIESMEN (GPIOE clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIOSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIOESMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR GPIOHSMEN (GPIOH clock enable during Sleep)
enum { RCC_AHB2SMENR_GPIOHSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_GPIOHSMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR SRAM2SMEN (SRAM2 clock enable during Sleep)
enum { RCC_AHB2SMENR_SRAM2SMEN_OFF_SETTING = 0, RCC_AHB2SMENR_SRAM2SMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR ADCSMEN (ADC clock enable during Sleep)
enum { RCC_AHB2SMENR_ADCSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_ADCSMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR AESMEN (AES clock enable during Sleep)
enum { RCC_AHB2SMENR_AESMEN_OFF_SETTING = 0, RCC_AHB2SMENR_AESMEN_ON_SETTING = 1 };

// RCC_AHB2SMENR RNGSMEN (RNG clock enable during Sleep)
enum { RCC_AHB2SMENR_RNGSMEN_OFF_SETTING = 0, RCC_AHB2SMENR_RNGSMEN_ON_SETTING = 1 };
// --- RCC_AHB2SMENR (AHB2 Peripheral Clock Enable in Sleep Mode Register) ---
typedef struct
{
    uint32_t GPIOASMEN:1;
    uint32_t GPIOBSMEN:1;
    uint32_t GPIOCSMEN:1;
    uint32_t GPIODSMEN:1;
    uint32_t GPIOESMEN:1;
    uint32_t res1 : 2;
    uint32_t GPIOHSMEN:1;
    uint32_t res2 : 1;
    uint32_t SRAM2SMEN:1;
    uint32_t res3 : 3;
    uint32_t ADCSMEN:1;
    uint32_t res4 : 2;
    uint32_t AESMEN:1;
    uint32_t res5 : 1;
    uint32_t RNGSMEN:1;
    uint32_t res6 : 13;
} RCC_AHB2SMENR_B_t;

typedef union
{
    RCC_AHB2SMENR_B_t B;
    uint32_t U;
} RCC_AHB2SMENR_Reg_t;

extern volatile RCC_AHB2SMENR_Reg_t RCC_AHB2SMENR_Reg;

// RCC_AHB3SMENR QSPISMEN (Quad SPI memory interface clock enable during Sleep)
enum { RCC_AHB3SMENR_QSPISMEN_OFF_SETTING = 0, RCC_AHB3SMENR_QSPISMEN_ON_SETTING = 1 };
// --- RCC_AHB3SMENR (AHB3 Peripheral Clock Enable in Sleep Mode Register) ---
typedef struct
{
    uint32_t res1 : 8;
    uint32_t QSPISMEN:1;
    uint32_t res2 : 23;
} RCC_AHB3SMENR_B_t;

typedef union
{
    RCC_AHB3SMENR_B_t B;
    uint32_t U;
} RCC_AHB3SMENR_Reg_t;

extern volatile RCC_AHB3SMENR_Reg_t RCC_AHB3SMENR_Reg;
// RCC_APB1SMENR1 TIM2SMEN (TIM2 clock enable during Sleep)
enum { RCC_APB1SMENR1_TIM2SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_TIM2SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 TIM3SMEN (TIM3 clock enable during Sleep)
enum { RCC_APB1SMENR1_TIM3SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_TIM3SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 TIM6SMEN (TIM6 clock enable during Sleep)
enum { RCC_APB1SMENR1_TIM6SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_TIM6SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 TIM7SMEN (TIM7 clock enable during Sleep)
enum { RCC_APB1SMENR1_TIM7SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_TIM7SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 LCDSMEN (LCD clock enable during Sleep)
enum { RCC_APB1SMENR1_LCDSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_LCDSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 RTCAPBSMEN (RTC APB clock enable during Sleep)
enum { RCC_APB1SMENR1_RTCAPBSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_RTCAPBSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 WWDGSMEN (Window watchdog clock enable during Sleep)
enum { RCC_APB1SMENR1_WWDGSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_WWDGSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 SPI2SMEN (SPI2 clock enable during Sleep)
enum { RCC_APB1SMENR1_SPI2SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_SPI2SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 SPI3SMEN (SPI3 clock enable during Sleep)
enum { RCC_APB1SMENR1_SPI3SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_SPI3SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 USART2SMEN (USART2 clock enable during Sleep)
enum { RCC_APB1SMENR1_USART2SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_USART2SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 UART3SMEN (USART3 clock enable during Sleep)
enum { RCC_APB1SMENR1_USART3SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_USART3SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 UART4SMEN (UART4 clock enable during Sleep)
enum { RCC_APB1SMENR1_UART4SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_UART4SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 I2C1SMEN (I2C1 clock enable during Sleep)
enum { RCC_APB1SMENR1_I2C1SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_I2C1SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 I2C2SMEN (I2C2 clock enable during Sleep)
enum { RCC_APB1SMENR1_I2C2SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_I2C2SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 I2C3SMEN (I2C3 clock enable during Sleep)
enum { RCC_APB1SMENR1_I2C3SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_I2C3SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 CRSSMEN (CRS clock enable during Sleep)
enum { RCC_APB1SMENR1_CRSSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_CRSSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 CAN1SMEN (CAN1 clock enable during Sleep)
enum { RCC_APB1SMENR1_CAN1SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_CAN1SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 USBFSSMEN (USB FS clock enable during Sleep)
enum { RCC_APB1SMENR1_USBFSSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_USBFSSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 PWRSEMEN (PWR interface clock enable during Sleep)
enum { RCC_APB1SMENR1_PWRSEMEN_OFF_SETTING = 0, RCC_APB1SMENR1_PWRSEMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 DAC1SMEN (DAC clock enable during Sleep)
enum { RCC_APB1SMENR1_DAC1SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_DAC1SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 OPAMPSMEN (OPAMP clock enable during Sleep)
enum { RCC_APB1SMENR1_OPAMPSMEN_OFF_SETTING = 0, RCC_APB1SMENR1_OPAMPSMEN_ON_SETTING = 1 };

// RCC_APB1SMENR1 LPTIM1SMEN (LPTIM1 clock enable during Sleep)
enum { RCC_APB1SMENR1_LPTIM1SMEN_OFF_SETTING = 0, RCC_APB1SMENR1_LPTIM1SMEN_ON_SETTING = 1 };

// --- RCC_APB1SMENR1 (APB1 Peripheral Clock Enable in Sleep Mode Register 1) ---
typedef struct
{
    uint32_t TIM2SMEN:1;
    uint32_t TIM3SMEN:1;
    uint32_t res_0:2;
    uint32_t TIM6SMEN:1;
    uint32_t TIM7SMEN:1;
    uint32_t res_1:3;
    uint32_t LCDSMEN : 1;
    uint32_t RTCAPBSMEN:1;
    uint32_t WWDGSMEN : 1;
    uint32_t res_2:2;
    uint32_t SPI2SMEN:1;
    uint32_t SPI3SMEN : 1;
    uint32_t res_3:1;
    uint32_t USART2SMEN:1;
    uint32_t USART3SMEN:1;
    uint32_t UART4SMEN:1;
    uint32_t res_4:1;
    uint32_t I2C1SMEN:1;
    uint32_t I2C2SMEN:1;
    uint32_t I2C3SMEN : 1;
    uint32_t CRSSMEN:1;
    uint32_t CAN1SMEN : 1;
    uint32_t USBFSSMEN:1;
    uint32_t res_5:1;
    uint32_t PWRSMEN:1;
    uint32_t DAC1SMEN : 1;
    uint32_t OPAMPSMEN:1;
    uint32_t LPTIM1SMEN : 1;
} RCC_APB1SMENR1_B_t; 

typedef union
{
    RCC_APB1SMENR1_B_t B;
    uint32_t U;
} RCC_APB1SMENR1_Reg_t;

extern volatile RCC_APB1SMENR1_Reg_t RCC_APB1SMENR1_Reg;

// RCC_APB1SMENR2 LPUART1SMEN (LPUART1 clock enable during Sleep)
enum { RCC_APB1SMENR2_LPUART1SMEN_OFF_SETTING = 0, RCC_APB1SMENR2_LPUART1SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR2 SWPMI1SMEN (SWPMI1 clock enable during Sleep)
enum { RCC_APB1SMENR2_SWPMI1SMEN_OFF_SETTING = 0, RCC_APB1SMENR2_SWPMI1SMEN_ON_SETTING = 1 };

// RCC_APB1SMENR2 LPTIM2SMEN (LPTIM2 clock enable during Sleep)
enum { RCC_APB1SMENR2_LPTIM2SMEN_OFF_SETTING = 0, RCC_APB1SMENR2_LPTIM2SMEN_ON_SETTING = 1 };
// --- RCC_APB1SMENR2 (APB1 Peripheral Clock Enable in Sleep Mode Register 2) ---
typedef struct
{
    uint32_t LPUART1SMEN : 1;
    uint32_t res0:1;
    uint32_t SWPMI1SMEN : 1;
    uint32_t res1:2;
    uint32_t LPTIM2SMEN : 1;
    uint32_t res2:26;
} RCC_APB1SMENR2_B_t;

typedef union
{
    RCC_APB1SMENR2_B_t B;
    uint32_t U;
} RCC_APB1SMENR2_Reg_t;

extern volatile RCC_APB1SMENR2_Reg_t RCC_APB1SMENR2_Reg;

// RCC_APB2SMENR SYSCFGSMEEN (System configuration controller clock enable during Sleep)
enum { RCC_APB2SMENR_SYSCFGSMEEN_OFF_SETTING = 0, RCC_APB2SMENR_SYSCFGSMEN_ON_SETTING = 1 };

// RCC_APB2SMENR SDMMC1SMEN (SDMMC1 clock enable during Sleep)
enum { RCC_APB2SMENR_SDMMC1SMEN_OFF_SETTING = 0, RCC_APB2SMENR_SDMMC1SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR TIM1SMEN (TIM1 timer clock enable during Sleep)
enum { RCC_APB2SMENR_TIM1SMEN_OFF_SETTING = 0, RCC_APB2SMENR_TIM1SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR SPI1SMEN (SPI1 clock enable during Sleep)
enum { RCC_APB2SMENR_SPI1SMEN_OFF_SETTING = 0, RCC_APB2SMENR_SPI1SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR USART1SMEN (USART1 clock enable during Sleep)
enum { RCC_APB2SMENR_USART1SMEN_OFF_SETTING = 0, RCC_APB2SMENR_USART1SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR TIM15SMEN (TIM15 timer clock enable during Sleep)
enum { RCC_APB2SMENR_TIM15SMEN_OFF_SETTING = 0, RCC_APB2SMENR_TIM15SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR TIM16SMEN (TIM16 timer clock enable during Sleep)
enum { RCC_APB2SMENR_TIM16SMEN_OFF_SETTING = 0, RCC_APB2SMENR_TIM16SMEN_ON_SETTING = 1 };

// RCC_APB2SMENR SAI1SMEN (SAI1 clock enable during Sleep)
enum { RCC_APB2SMENR_SAI1SMEN_OFF_SETTING = 0, RCC_APB2SMENR_SAI1SMEN_ON_SETTING = 1 };
// --- RCC_APB2SMENR (APB2 Peripheral Clock Enable in Sleep Mode Register) ---
typedef struct
{
    uint32_t SYSCFGSMEN:1;
    uint32_t res1 : 9;
    uint32_t SDMMC1SMEN:1;
    uint32_t TIM1SMEN:1;
    uint32_t SPI1SMEN : 1;
    uint32_t res2:1;
    uint32_t USART1SMEN : 1;
    uint32_t res3:1;
    uint32_t TIM15SMEN : 1;
    uint32_t TIM16SMEN:1;
    uint32_t res4:3;
    uint32_t SAI1SMEN : 1;
    uint32_t res5:10;
} RCC_APB2SMENR_B_t;

typedef union
{
    RCC_APB2SMENR_B_t B;
    uint32_t U;
} RCC_APB2SMENR_Reg_t;

extern volatile RCC_APB2SMENR_Reg_t RCC_APB2SMENR_Reg;

// RCC_CCIPR USART1SEL (USART1 clock source selection)
enum {
    RCC_CCIPR_USART1SEL_PCLK2_SETTING = 0x0,
    RCC_CCIPR_USART1SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_USART1SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_USART1SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR USART2SEL (USART2 clock source selection)
enum {
    RCC_CCIPR_USART2SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_USART2SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_USART2SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_USART2SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR USART3SEL (USART3 clock source selection)
enum {
    RCC_CCIPR_USART3SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_USART3SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_USART3SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_USART3SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR UART4SEL (UART4 clock source selection)
enum {
    RCC_CCIPR_UART4SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_UART4SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_UART4SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_UART4SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR UART5SEL (UART5 clock source selection)
enum {
    RCC_CCIPR_UART5SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_UART5SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_UART5SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_UART5SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR LPUART1SEL (LPUART1 clock source selection)
enum {
    RCC_CCIPR_LPUART1SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_LPUART1SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_LPUART1SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_LPUART1SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR I2C1SEL (I2C1 clock source selection)
enum {
    RCC_CCIPR_I2C1SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_I2C1SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_I2C1SEL_HSI16_SETTING = 0x2
};

// RCC_CCIPR I2C2SEL (I2C2 clock source selection)
enum {
    RCC_CCIPR_I2C2SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_I2C2SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_I2C2SEL_HSI16_SETTING = 0x2
};

// RCC_CCIPR I2C3SEL (I2C3 clock source selection)
enum {
    RCC_CCIPR_I2C3SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_I2C3SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR_I2C3SEL_HSI16_SETTING = 0x2
};

// RCC_CCIPR LPTIM1SEL (LPTIM1 clock source selection)
enum {
    RCC_CCIPR_LPTIM1SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_LPTIM1SEL_LSI_SETTING = 0x1,
    RCC_CCIPR_LPTIM1SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_LPTIM1SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR LPTIM2SEL (LPTIM2 clock source selection)
enum {
    RCC_CCIPR_LPTIM2SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_LPTIM2SEL_LSI_SETTING = 0x1,
    RCC_CCIPR_LPTIM2SEL_HSI16_SETTING = 0x2,
    RCC_CCIPR_LPTIM2SEL_LSE_SETTING = 0x3
};

// RCC_CCIPR SAI1SEL (SAI1 clock source selection)
enum {
    RCC_CCIPR_SAI1SEL_PLLSAI1_SETTING = 0x0,
    RCC_CCIPR_SAI1SEL_PLLSAI2_SETTING = 0x1,
    RCC_CCIPR_SAI1SEL_PLL_SETTING = 0x2,
    RCC_CCIPR_SAI1SEL_HSI16_SETTING = 0x3
};

// RCC_CCIPR CLK48SEL (48 MHz clock source selection)
enum {
    RCC_CCIPR_CLK48SEL_HSI48_SETTING = 0x0,
    RCC_CCIPR_CLK48SEL_PLLSAI1_SETTING = 0x1,
    RCC_CCIPR_CLK48SEL_PLL_SETTING = 0x2,
    RCC_CCIPR_CLK48SEL_MSI_SETTING = 0x3
};

// RCC_CCIPR ADCSEL (ADC clock source selection)
enum {
    RCC_CCIPR_ADCSEL_NONE_SETTING = 0x0,
    RCC_CCIPR_ADCSEL_PLLSAI1_SETTING = 0x1,
    RCC_CCIPR_ADCSEL_PLL_SETTING = 0x2,
    RCC_CCIPR_ADCSEL_SYSCLK_SETTING = 0x3
};

// RCC_CCIPR SWPMI1SEL (SWPMI1 clock source selection)
enum {
    RCC_CCIPR_SWPMI1SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR_SWPMI1SEL_HSI16_SETTING = 0x1
};
// --- RCC_CCIPR (Peripherals Independent Clock Configuration Register) ---
typedef struct
{
    uint32_t USART1SEL:2;
    uint32_t USART2SEL:2;
    uint32_t USART3SEL:2;
    uint32_t UART4SEL:2;
    uint32_t UART5SEL:2;
    uint32_t res0:2;
    uint32_t LPUART1SEL:2;
    uint32_t I2C1SEL:2;
    uint32_t I2C2SEL:2;
    uint32_t I2C3SEL : 2;
    uint32_t LPTIM1SEL:2;
    uint32_t LPTIM2SEL:2;
    uint32_t SAI1SEL:2;
    uint32_t res1:2;
    uint32_t CLK48SEL : 2;
    uint32_t ADCSEL:2;
    uint32_t SWPMI1SEL:1;
    uint32_t res3 : 1;
} RCC_CCIPR_B_t;

typedef union
{
    RCC_CCIPR_B_t B;
    uint32_t U;
} RCC_CCIPR_Reg_t;

extern volatile RCC_CCIPR_Reg_t RCC_CCIPR_Reg;

// RCC_BDCR LSEON (LSE oscillator enable)
enum { RCC_BDCR_LSEON_OFF_SETTING = 0, RCC_BDCR_LSEON_ON_SETTING = 1 };

// RCC_BDCR LSERDY (LSE oscillator ready)
enum { RCC_BDCR_LSERDY_NOTREADY_SETTING = 0, RCC_BDCR_LSERDY_READY_SETTING = 1 };

// RCC_BDCR LSEBYP (LSE oscillator bypass)
enum { RCC_BDCR_LSEBYP_OFF_SETTING = 0, RCC_BDCR_LSEBYP_ON_SETTING = 1 };

// RCC_BDCR LSEDRV (LSE drive capability)
enum {
    RCC_BDCR_LSEDRV_LOW_SETTING    = 0x0,
    RCC_BDCR_LSEDRV_MEDIUM_SETTING = 0x1,
    RCC_BDCR_LSEDRV_HIGH_SETTING   = 0x2,
    RCC_BDCR_LSEDRV_MAX_SETTING    = 0x3
};

// RCC_BDCR LSECSSON (LSE clock security system enable)
enum { RCC_BDCR_LSECSSON_OFF_SETTING = 0, RCC_BDCR_LSECSSON_ON_SETTING = 1 };

// RCC_BDCR LSECSSD (LSE clock security system failure detected)
enum { RCC_BDCR_LSECSSD_NOFAIL_SETTING = 0, RCC_BDCR_LSECSSD_FAIL_SETTING = 1 };

// RCC_BDCR LSESYSDIS (LSE system clock disable)
enum { RCC_BDCR_LSESYSDIS_OFF_SETTING = 0, RCC_BDCR_LSESYSDIS_ON_SETTING = 1 };

// RCC_BDCR RTCSEL (RTC clock source selection)
enum {
    RCC_BDCR_RTCSEL_NONE_SETTING = 0x0,
    RCC_BDCR_RTCSEL_LSE_SETTING  = 0x1,
    RCC_BDCR_RTCSEL_LSI_SETTING  = 0x2,
    RCC_BDCR_RTCSEL_HSE_SETTING  = 0x3
};

// RCC_BDCR RTCEN (RTC clock enable)
enum { RCC_BDCR_RTCEN_OFF_SETTING = 0, RCC_BDCR_RTCEN_ON_SETTING = 1 };

// RCC_BDCR BDRST (Backup domain software reset)
enum { RCC_BDCR_BDRST_NO_SETTING = 0, RCC_BDCR_BDRST_RESET_SETTING = 1 };

// RCC_BDCR LSCOEN (LSCO output enable)
enum { RCC_BDCR_LSCOEN_OFF_SETTING = 0, RCC_BDCR_LSCOEN_ON_SETTING = 1 };

// RCC_BDCR LSCOSEL (LSCO output selection)
enum {
    RCC_BDCR_LSCOSEL_LSI_SETTING = 0,
    RCC_BDCR_LSCOSEL_LSE_SETTING = 1
};
// --- RCC_BDCR (Backup Domain Control Register) ---
typedef struct
{
    uint32_t LSEON:1;
    uint32_t LSERDY:1;
    uint32_t LSEBYP:1;
    uint32_t LSEDRV:2;
    uint32_t LSECSSON : 1;
    uint32_t LSECSSD:1;
    uint32_t LSESYSDIS:1;
    uint32_t RTCSEL:2;
    uint32_t res0:5;
    uint32_t RTCEN:1;
    uint32_t BDRST : 1;
    uint32_t res1:7;
    uint32_t LSCOEN : 1;
    uint32_t LSCOSEL:1;
    uint32_t res2:6;
} RCC_BDCR_B_t;

typedef union
{
    RCC_BDCR_B_t B;
    uint32_t U;
} RCC_BDCR_Reg_t;

extern volatile RCC_BDCR_Reg_t RCC_BDCR_Reg;
// RCC_CSR LSION (LSI oscillator enable)
enum { RCC_CSR_LSION_OFF_SETTING = 0, RCC_CSR_LSION_ON_SETTING = 1 };

// RCC_CSR LSIRDY (LSI oscillator ready)
enum { RCC_CSR_LSIRDY_NOTREADY_SETTING = 0, RCC_CSR_LSIRDY_READY_SETTING = 1 };

// RCC_CSR LSIPREDIV (LSI prescaler)
enum { RCC_CSR_LSIPREDIV_DIV1_SETTING = 0, RCC_CSR_LSIPREDIV_DIV128_SETTING = 1 };

// RCC_CSR MSISRANGE (MSI range after standby)
enum {
    RCC_CSR_MSISRANGE_100KHZ_SETTING  = 0x0,
    RCC_CSR_MSISRANGE_200KHZ_SETTING  = 0x1,
    RCC_CSR_MSISRANGE_400KHZ_SETTING  = 0x2,
    RCC_CSR_MSISRANGE_800KHZ_SETTING  = 0x3,
    RCC_CSR_MSISRANGE_1MHZ_SETTING    = 0x4,
    RCC_CSR_MSISRANGE_2MHZ_SETTING    = 0x5,
    RCC_CSR_MSISRANGE_4MHZ_SETTING    = 0x6,
    RCC_CSR_MSISRANGE_8MHZ_SETTING    = 0x7,
    RCC_CSR_MSISRANGE_16MHZ_SETTING   = 0x8,
    RCC_CSR_MSISRANGE_24MHZ_SETTING   = 0x9,
    RCC_CSR_MSISRANGE_32MHZ_SETTING   = 0xA,
    RCC_CSR_MSISRANGE_48MHZ_SETTING   = 0xB
};

// RCC_CSR RMVF (Remove reset flag)
enum { RCC_CSR_RMVF_NO_SETTING = 0, RCC_CSR_RMVF_CLEAR_SETTING = 1 };

// RCC_CSR FWRSTF (Firewall reset flag)
enum { RCC_CSR_FWRSTF_NO_SETTING = 0, RCC_CSR_FWRSTF_SET_SETTING = 1 };

// RCC_CSR OBLRSTF (Option byte loader reset flag)
enum { RCC_CSR_OBLRSTF_NO_SETTING = 0, RCC_CSR_OBLRSTF_SET_SETTING = 1 };

// RCC_CSR PINRSTF (PIN reset flag)
enum { RCC_CSR_PINRSTF_NO_SETTING = 0, RCC_CSR_PINRSTF_SET_SETTING = 1 };

// RCC_CSR BORRSTF (BOR reset flag)
enum { RCC_CSR_BORRSTF_NO_SETTING = 0, RCC_CSR_BORRSTF_SET_SETTING = 1 };

// RCC_CSR SFTRSTF (Software reset flag)
enum { RCC_CSR_SFTRSTF_NO_SETTING = 0, RCC_CSR_SFTRSTF_SET_SETTING = 1 };

// RCC_CSR IWWGRSTF (Independent window watchdog reset flag)
enum { RCC_CSR_IWWGRSTF_NO_SETTING = 0, RCC_CSR_IWWGRSTF_SET_SETTING = 1 };

// RCC_CSR WWDGRSTF (Window watchdog reset flag)
enum { RCC_CSR_WWDGRSTF_NO_SETTING = 0, RCC_CSR_WWDGRSTF_SET_SETTING = 1 };

// RCC_CSR LPPWRRSTF (Low-power reset flag)
enum { RCC_CSR_LPPWRRSTF_NO_SETTING = 0, RCC_CSR_LPPWRRSTF_SET_SETTING = 1 };

// --- RCC_CSR (Clock Control and Status Register) ---
typedef struct
{
    uint32_t LSION:1;
    uint32_t LSIRDY:1;
    uint32_t res1 : 2;
    uint32_t LSIPREDIV:1;
    uint32_t res3:3;
    uint32_t MSISRANGE : 4;
    uint32_t res2:11;
    uint32_t RMVF:1;
    uint32_t FWRSTF:1;
    uint32_t OBLRSTF:1;
    uint32_t PINRSTF:1;
    uint32_t BORRSTF:1;
    uint32_t SFTRSTF:1;
    uint32_t IWWGRSTF : 1;
    uint32_t WWDGRSTF:1;
    uint32_t LPPWRRSTF:1;
} RCC_CSR_B_t;

typedef union
{
    RCC_CSR_B_t B;
    uint32_t U;
} RCC_CSR_Reg_t;

extern volatile RCC_CSR_Reg_t RCC_CSR_Reg;

// RCC_CRRCR HSI48ON (HSI48 oscillator enable)
enum { RCC_CRRCR_HSI48ON_OFF_SETTING = 0, RCC_CRRCR_HSI48ON_ON_SETTING = 1 };

// RCC_CRRCR HSI48RDY (HSI48 oscillator ready)
enum { RCC_CRRCR_HSI48RDY_NOTREADY_SETTING = 0, RCC_CRRCR_HSI48RDY_READY_SETTING = 1 };

// RCC_CRRCR HSI48CAL (HSI48 clock calibration, 9 bits: 0..511)
// Use direct value, e.g. .HSI48CAL = 256

// --- RCC_CRRCR (Clock Recovery RC Register) ---
typedef struct
{
    uint32_t HSI48ON   : 1;
    uint32_t HSI48RDY  : 1;
    uint32_t res1      : 6;
    uint32_t HSI48CAL  : 9;
    uint32_t res2      : 15;
} RCC_CRRCR_B_t;

typedef union
{
    RCC_CRRCR_B_t B;
    uint32_t U;
} RCC_CRRCR_Reg_t;

extern volatile RCC_CRRCR_Reg_t RCC_CRRCR_Reg;

// RCC_CCIPR2 I2C4SEL (I2C4 clock source selection)
enum {
    RCC_CCIPR2_I2C4SEL_PCLK1_SETTING = 0x0,
    RCC_CCIPR2_I2C4SEL_SYSCLK_SETTING = 0x1,
    RCC_CCIPR2_I2C4SEL_HSI16_SETTING = 0x2
};

// --- RCC_CCIPR2 (Peripherals Independent Clock Configuration Register 2) ---
typedef struct
{
    uint32_t I2C4SEL : 2;
    uint32_t res1    : 30;
} RCC_CCIPR2_B_t;

typedef union
{
    RCC_CCIPR2_B_t B;
    uint32_t U;
} RCC_CCIPR2_Reg_t;

extern volatile RCC_CCIPR2_Reg_t RCC_CCIPR2_Reg;

#endif